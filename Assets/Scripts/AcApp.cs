using UnityEngine;
using System.Collections;

/// <summary>
/// ゲームの定数とかシーンをまたぐ変数をまとめておくクラスだよ
/// </summary>
public class AcApp : Object
{
	// ========================================================================== //
	// ========================================================================== //
	/*
	 * 
	 */
	// -------------------------------------------------------------------------- //
	// -------------------------------------------------------------------------- //
	/*
	 * 
	 */
	// ========================================================================== //
	// ========================================================================== //

	// ========================================================================== //
	// ========================================================================== //

	/*
	 * レイヤー
	 * http://docs-jp.unity3d.com/Documentation/Components/Layers.html
	 * 
	 * http://www.wisdomsoft.jp/150.html
	 * 
	 * 2014/11/04
	 * カメラの重ねあわせとかで実験したけど取り敢えず使わない予定
	 */

	public const int OBJECT_LAYER_GAME = 8;
	public const int OBJECT_LAYER_GUI = 9;

	public const int CAMERA_LAYERMASK_GAME = 1 << OBJECT_LAYER_GAME;
	public const int CAMERA_LAYERMASK_GUI = 1 << OBJECT_LAYER_GUI;

	// -------------------------------------------------------------------------- //
	// -------------------------------------------------------------------------- //

	/// <summary>
	/// ゲーム用ポジション
	/// </summary>
	public static readonly Vector3 GamePosition = new Vector3( 0.0f, 10.0f, 0.0f );

	/// <summary>
	/// Title / Howtoplay / Ranking 用ポジション
	/// </summary>
	public static readonly Vector3 GuiPosition = new Vector3( 0.0f, 0.0f, 0.0f );

	// ========================================================================== //
	// ========================================================================== //

	// ========================================================================== //
	// ========================================================================== //

	/*
	 * 仮想画面サイズ
	 * 動的に GUI を出す時等に参照するよ
	 */
	public const int SCREEN_W = 480;
	public const int SCREEN_H = 800;

	// -------------------------------------------------------------------------- //
	// -------------------------------------------------------------------------- //

	// ========================================================================== //
	// ========================================================================== //

	/*
	 * ゲームモード
	 */
	public const int GAMEMODE_TIMEATTACK = 0;
	public const int GAMEMODE_CHALLENGE = 1;

	// -------------------------------------------------------------------------- //
	// -------------------------------------------------------------------------- //

	/*
	 * クリアすべきドアの数
	 */
	public const int GAMERULE_TIMEATTACK_DOOR = 20;		// 暫定数値 = 20（2014/10/29 現在）
	/*
	 * プレイ時間（秒数です）
	 */
	public const float GAMERULE_CHALLENGE_TIME = 60.0f;		// 暫定数値 = 60.0f（2014/10/29 現在）

	// ========================================================================== //
	// ========================================================================== //

	// ========================================================================== //
	// ========================================================================== //

	/// <summary>
	/// シングルトン
	/// </summary>
	private static AcApp m_vInstance = new AcApp();

	// -------------------------------------------------------------------------- //
	// -------------------------------------------------------------------------- //

	/// <summary>
	/// タイトル画面の表示チェックに使用してます
	/// </summary>
	private bool m_bBoot;

	///// <summary>
	///// オートモード中フラグ
	///// </summary>
	//private bool m_bAuto;

	///// <summary>
	///// 「オートプレイモード → 通常ゲームモード」要求フラグ
	///// </summary>
	//private bool m_bStopAuto;

	///// <summary>
	///// 「通常ゲームモード → オートプレイモード」要求フラグ
	///// </summary>
	//private bool m_bPlayAuto;

	/// <summary>
	/// タイムアタックモード / チャレンジモード
	/// </summary>
	private int m_vGameMode;

	// ========================================================================== //
	// ========================================================================== //

	// ========================================================================== //
	// ========================================================================== //

	/// <summary>
	/// デフォルトコンストラクタ
	/// </summary>
	private AcApp()
	{
		m_bBoot = false;
		//
		//m_bAuto = true;
		//m_bPlayAuto = false;
		//m_bStopAuto = false;
		//
		m_vGameMode = GAMEMODE_TIMEATTACK;
	}

	// ========================================================================== //
	// ========================================================================== //

	// ========================================================================== //
	// ========================================================================== //

	public static void swBoot( bool bSw )
	{
		m_vInstance.m_bBoot = bSw;
	}

	public static bool isBoot()
	{
		return ( m_vInstance.m_bBoot );
	}

	// -------------------------------------------------------------------------- //
	// -------------------------------------------------------------------------- //

	//public static void playAuto()
	//{
	//	if ( !m_vInstance.m_bAutoPlay )
	//	{
	//		m_vInstance.m_bAutoPlay = true;
	//		m_vInstance.m_bAutoStop = false;
	//	}
	//}

	///// <summary>
	///// ゲームモードが選択された時に、オートプレイを終了させるためのフラグを立てる
	///// </summary>
	//public static void stopAuto()
	//{
	//	if ( m_vInstance.m_bAutoPlay )
	//	{
	//		//m_vInstance.m_bAuto = true;
	//		m_vInstance.m_bAutoStop = true;
	//	}
	//}

	///// <summary>
	///// オートモード状態変化
	///// </summary>
	///// <param name="bSw"></param>
	//public static void swAuto( bool bSw )
	//{
	//	m_vInstance.m_bAuto = bSw;
	//}

	///// <summary>
	///// オートモード状態確認
	///// </summary>
	///// <returns></returns>
	//public static bool isAuto()
	//{
	//	return ( m_vInstance.m_bAuto );
	//}

	///// <summary>
	///// リクエスト発行
	///// </summary>
	///// <param name="bSw"></param>
	//public static void swStopAuto( bool bSw )
	//{
	//	m_vInstance.m_bStopAuto = bSw;
	//}

	///// <summary>
	///// リクエスト確認
	///// </summary>
	///// <returns></returns>
	//public static bool isStopAuto()
	//{
	//	return ( m_vInstance.m_bStopAuto );
	//}

	///// <summary>
	///// リクエスト発行
	///// </summary>
	///// <param name="bSw"></param>
	//public static void swPlayAuto( bool bSw )
	//{
	//	m_vInstance.m_bPlayAuto = bSw;
	//}

	///// <summary>
	///// リクエスト確認
	///// </summary>
	///// <returns></returns>
	//public static bool isPlayAuto()
	//{
	//	return ( m_vInstance.m_bPlayAuto );
	//}


	// -------------------------------------------------------------------------- //
	// -------------------------------------------------------------------------- //

	public static void setGameMode( int vGameMode )
	{
		m_vInstance.m_vGameMode = vGameMode;
	}

	public static int getGameMode()
	{
		return ( m_vInstance.m_vGameMode );
	}

	// -------------------------------------------------------------------------- //
	// -------------------------------------------------------------------------- //

	/// <summary>
	/// フレームレートを取得する
	/// と思ったがあんまり役に立たない？
	/// 
	/// とりあえず使用禁止！
	/// </summary>
	/// <returns></returns>
	public static int getFrameRate()
	{
		int _frameRate = Application.targetFrameRate;
		//
		if ( _frameRate < 0 )
		{
			_frameRate = 60;
		}
		//
		return ( _frameRate );
	}

	// ========================================================================== //
	// ========================================================================== //

	// ========================================================================== //
	// ========================================================================== //
}
